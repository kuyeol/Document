openapi: "3.1.0"
info:
  title: "spring API"
  description: "spring API"
  version: "1.0.0"
servers:
  - url: "https://spring"
paths:
  /{variable}:
    get:
      summary: "GET *"
      operationId: "swagger"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /zerg/ping:
    post:
      summary: "POST zerg/ping"
      operationId: "ping"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Barracks"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /zerg/toavro:
    post:
      summary: "POST zerg/toavro"
      operationId: "toavro"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unit"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /zerg/list/{page}:
    get:
      summary: "GET zerg/list/{page}"
      operationId: "list"
      parameters:
        - name: "page"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "type"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "BARRACKS"
              - "COMMANDCENTER"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /zerg/findBarrak/{id}:
    get:
      summary: "GET zerg/findBarrak/{id}"
      operationId: "findBarrak"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /zerg/findID/{id}:
    get:
      summary: "GET zerg/findID/{id}"
      operationId: "findD"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /zerg/avro/{id}:
    get:
      summary: "GET zerg/avro/{id}"
      operationId: "avro"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /zerg/hi:
    get:
      summary: "GET zerg/hi"
      operationId: "hi"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /terran/ping:
    post:
      summary: "POST terran/ping"
      operationId: "ping"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Barracks"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /terran/toavro:
    post:
      summary: "POST terran/toavro"
      operationId: "toavro"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unit"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /terran/NEW:
    get:
      summary: "GET terran/NEW"
      operationId: "newmethod"
      parameters:
        - name: "type"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "BARRACKS"
              - "COMMANDCENTER"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/:
    get:
      summary: "GET terran/"
      operationId: "HOME"
      parameters:
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "type"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "BARRACKS"
              - "COMMANDCENTER"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/accessTest:
    get:
      summary: "GET terran/accessTest"
      operationId: "ttt"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/list/{page}:
    get:
      summary: "GET terran/list/{page}"
      operationId: "list"
      parameters:
        - name: "page"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "type"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "BARRACKS"
              - "COMMANDCENTER"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/findBarrak/{id}:
    get:
      summary: "GET terran/findBarrak/{id}"
      operationId: "findBarrak"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/findcommand/{id}:
    get:
      summary: "GET terran/findcommand/{id}"
      operationId: "findCommand"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/findID/{id}:
    get:
      summary: "GET terran/findID/{id}"
      operationId: "findD"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/avro/{id}:
    get:
      summary: "GET terran/avro/{id}"
      operationId: "avro"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /terran/hi:
    get:
      summary: "GET terran/hi"
      operationId: "hi"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /android/news:
    post:
      summary: "POST android/news"
      operationId: "createNews"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /android/topic:
    post:
      summary: "POST android/topic"
      operationId: "createTopic"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /android/news{id}:
    get:
      summary: "GET android/news{id}"
      operationId: "getNewsByID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /android/topics:
    get:
      summary: "GET android/topics"
      operationId: "getTopic"
      parameters:
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
components:
  schemas:
    Barracks:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        publicstring:
          type: "string"
        secret:
          type: "string"
        age:
          type: "integer"
          format: "int32"
    Unit:
      type: "object"
      properties:
        name:
          type: "string"
        age:
          type: "integer"
          format: "int32"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
      required:
        - "headers"
